---
job: dpcp-ci-demo

registry_host: harbor.mellanox.com
registry_auth: 65eb3652-9da0-4f39-8a4c-f61972fb65a1

credentials:
  - {credentialsId: 'ca8843ac-fb09-493e-aefb-29ea73501ee4', usernameVariable: 'DPCP_COV_USER', passwordVariable: 'DPCP_COV_PASSWORD'}

kubernetes:
  cloud: swx-k8s-spray

  limits: '{memory: 8Gi, cpu: 8000m}'
  requests: '{memory: 8Gi, cpu: 8000m}'

  # Use JNLP images with swx-jenkins user (TODO: think about making these images default and multi-arch).
  # K8s cluster nodes should run the folowing commands to allow running containers under swx-jenkins:
  #     sudo setfacl --modify user:swx-jenkins:rw /var/run/docker.sock
  #     sudo gpasswd -a swx-jenkins docker
  #     sudo service docker restart
  arch_table:
    x86_64:
      jnlpImage: 'harbor.mellanox.com/swx-infra/swx-jenkins-agent-jnlp:x86_64'
      dockerImage: 'harbor.mellanox.com/rivermax/docker:19.03'
    aarch64:
      jnlpImage: 'harbor.mellanox.com/swx-infra/swx-jenkins-agent-jnlp:aarch64'
      dockerImage: 'harbor.mellanox.com/rivermax/docker:19.03_aarch64'

volumes:
  - {mountPath: /hpc/local, hostPath: /hpc/local}
  - {mountPath: /auto/sw_tools, hostPath: /auto/sw_tools}
  # /.autodirect/sw/release/mlnx_ofed is a primary nfs volume for mlnx_ofed
  # Probably there is a race condition for autofs mount point while starting container with:
  # /auto/sw/release/mlnx_ofed
  - {mountPath: /auto/sw/release/mlnx_ofed, hostPath: /.autodirect/sw/release/mlnx_ofed}
  - {mountPath: /auto/sw/release/sw_acceleration, hostPath: /auto/sw/release/sw_acceleration}


runs_on_dockers:
  - {file: '.dockers/Dockerfile.ubuntu22.04', arch: 'x86_64', name: 'ubuntu22.04', url: 'harbor.mellanox.com/rivermax/dpcp/x86_64/ubuntu22.04/base', build_args: '--build-arg ARCH=x86_64 --no-cache'}
  - {file: '.dockers/Dockerfile.ubuntu22.04', arch: 'aarch64', name: 'ubuntu22.04.aarch64', url: 'harbor.mellanox.com/rivermax/dpcp/aarch64/ubuntu22.04/base', build_args: '--build-arg ARCH=aarch64 --no-cache'}
  - {file: '.dockers/Dockerfile.ubuntu24.04', arch: 'x86_64', name: 'ubuntu22.04', url: 'harbor.mellanox.com/rivermax/dpcp/x86_64/ubuntu24.04/base', build_args: '--build-arg ARCH=x86_64 --no-cache'}
  - {file: '.dockers/Dockerfile.ubuntu24.04', arch: 'aarch64', name: 'ubuntu22.04.aarch64', url: 'harbor.mellanox.com/rivermax/dpcp/aarch64/ubuntu24.04/base', build_args: '--build-arg ARCH=aarch64 --no-cache'}
  - {file: '.dockers/Dockerfile.rhel8.4', arch: 'x86_64', name: 'rhel8.4', url: 'harbor.mellanox.com/rivermax/dpcp/x86_64/rhel8.4/base', build_args: '--build-arg ARCH=aarch64 --no-x86_64'}
  - {file: '.dockers/Dockerfile.rhel8.4', arch: 'aarch64', name: 'rhel8.4.aarch64', url: 'harbor.mellanox.com/rivermax/dpcp/aarch64/rhel8.4/base', build_args: '--build-arg ARCH=aarch64 --no-cache'}
  - {file: '.dockers/Dockerfile.rhel8.6', arch: 'x86_64', name: 'rhel8.6', url: 'harbor.mellanox.com/rivermax/dpcp/x86_64/rhel8.6/base', build_args: '--build-arg ARCH=x86_64 --no-cache'}
  - {file: '.dockers/Dockerfile.rhel8.6', arch: 'aarch64', name: 'rhel8.6.aarch64', url: 'harbor.mellanox.com/rivermax/dpcp/aarch64/rhel8.6/base', build_args: '--build-arg ARCH=aarch64 --no-cache'}
  - {file: '.dockers/Dockerfile.rhel9.2', arch: 'x86_64', name: 'rhel9.2', url: 'harbor.mellanox–π.com/rivermax/dpcp/x86_64/rhel9.2/base', build_args: '--no-cache'}
  - {file: '.dockers/Dockerfile.oel8.4', arch: 'x86_64', name: 'oel8.4', url: 'harbor.mellanox.com/rivermax/dpcp/x86_64/oel8.4/base', build_args: '--no-cache'}
  - {file: '.dockers/Dockerfile.oel8.6', arch: 'x86_64', name: 'oel8.6', url: 'harbor.mellanox.com/rivermax/dpcp/x86_64/oel8.6/base', build_args: '--no-cache'}
  - {file: '.dockers/Dockerfile.oel8.7', arch: 'x86_64', name: 'oel8.7', url: 'harbor.mellanox.com/rivermax/dpcp/x86_64/oel8.7/base', build_args: '--no-cache'}
  - {file: '.dockers/Dockerfile.fedora32', arch: 'x86_64', name: 'fedora32',
     url: 'harbor.mellanox.com/rivermax/dpcp/x86_64/fedora32:clang', tag: 'clang', category: 'tool', build_args: '--no-cache'}
  - {name: 'header-check', url: 'harbor.mellanox.com/toolbox/header_check:0.0.14', arch: 'x86_64', tag: '0.0.14', category: 'tool', build_args: '--no-cache'}
  - {file: '.dockers/Dockerfile.ubuntu18.04', arch: 'x86_64', name: 'ubuntu18.04.cov', url: 'harbor.mellanox.com/rivermax/dpcp/x86_64/ubuntu18.04/cov', tag: 'mofed-23.07-0.5.1.2', category: 'tool', build_args: '--no-cache'}


runs_on_agents:
  - {nodeLabel: 'beni09', category: 'base'}

# Fail job if one of the steps fails or continue
failFast: false

steps:
  - name: Setup
    run: |
        set +x
        echo
        echo "======================================================"
        echo "name: ${name}"
        echo "arch: ${arch}"
        echo "url: ${uri}"
        echo "tag: ${tag}"
        echo "variant: ${variant}"
        echo "category: ${category}"
        echo "======================================================"
        echo
        printenv
    parallel: false

  - name: Copyrights
    enable: ${do_copyrights}
    run: env WORKSPACE=$PWD ./contrib/jenkins_tests/copyrights.sh
    containerSelector:
      - "{name: 'header-check', category: 'tool'}"
    agentSelector:
      - "{nodeLabel: 'skip-agent'}"
    archiveArtifacts: '*.log,*.tar.gz'
    parallel: false

  - name: Install DOCA for Host
    run: |
      echo "Installing DOCA: ${DOCA_VERSION} ..."
      sudo .ci/scripts/doca_install.sh 

  - name: Install DOCA (Coverity)
    enable: ${ENABLE_COVERITY}
    run: |
      echo "Installing DOCA driver: ${DOCA_VERSION} ..."
      sudo .ci/scripts/doca_install.sh 
    containerSelector:
      - '{name: ".*cov", category: "tool"}'

  - name: Autogen
    run: |
      ./autogen.sh -s
    parallel: false

  - name: Build
    run: |
        env DISTRO=$name \
            JENKINS_RUN_TESTS=no \
            jenkins_test_build=yes \
            jenkins_test_compiler=no \
            jenkins_test_rpm=yes \
            jenkins_test_cov=no \
            jenkins_test_cppcheck=no \
            jenkins_test_csbuild=no \
            jenkins_test_gtest=no \
            jenkins_test_style=no \
            ./contrib/test_jenkins.sh
    containerSelector:
      - "{name: 'ubuntu20.04'}"
    agentSelector:
      - "{nodeLabel: 'skip-agent'}"
    archiveArtifacts: 'jenkins/dpcp-${BUILD_ID}-*.tar.gz'
    archiveTap: |
      jenkins/**/build-ubuntu20.04.tap

  - name: Build
    run: |
        env DISTRO=$name \
            JENKINS_RUN_TESTS=no \
            jenkins_test_build=yes \
            jenkins_test_compiler=no \
            jenkins_test_rpm=yes \
            jenkins_test_cov=no \
            jenkins_test_cppcheck=no \
            jenkins_test_csbuild=no \
            jenkins_test_gtest=no \
            jenkins_test_style=no \
            ./contrib/test_jenkins.sh
    containerSelector:
      - "{name: 'ubuntu22.04'}"
    agentSelector:
      - "{nodeLabel: 'skip-agent'}"
    archiveArtifacts: 'jenkins/dpcp-${BUILD_ID}-*.tar.gz'
    archiveTap: |
      jenkins/**/build-ubuntu22.04.tap

  - name: Build
    run: |
        env WORKSPACE=$(pwd) \
            DISTRO=$name \
            JENKINS_RUN_TESTS=no \
            jenkins_test_build=yes \
            jenkins_test_compiler=no \
            jenkins_test_rpm=yes \
            jenkins_test_cov=no \
            jenkins_test_cppcheck=no \
            jenkins_test_csbuild=no \
            jenkins_test_gtest=no \
            jenkins_test_style=no \
            ./contrib/test_jenkins.sh
    archiveArtifacts: 'jenkins/dpcp-${BUILD_ID}-*.tar.gz'
    containerSelector:
      - "{name: 'skip-container'}"
    agentSelector:
      - "{nodeLabel: 'beni09'}"
    archiveTap: |
      jenkins/**/build-beni09.tap

  - name: Gtest
    run: |
        env JENKINS_RUN_TESTS=yes \
            jenkins_test_build=yes \
            jenkins_test_compiler=no \
            jenkins_test_rpm=no \
            jenkins_test_cov=no \
            jenkins_test_cppcheck=no \
            jenkins_test_csbuild=no \
            jenkins_test_gtest=yes \
            jenkins_test_style=no \
            ./contrib/test_jenkins.sh
    containerSelector:
      - "{name: 'skip-container'}"
    agentSelector:
      - "{nodeLabel: 'beni09'}"
    archiveTap: |
      jenkins/**/gtest-*.tap
    archiveJunit: |
      jenkins/**/*.xml

  - name: Coverity
    enable: ${do_coverity}
    credentialsId: 'ca8843ac-fb09-493e-aefb-29ea73501ee4'
    run: |
        env JENKINS_RUN_TESTS=yes \
            jenkins_test_build=no \
            jenkins_test_compiler=no \
            jenkins_test_rpm=no \
            jenkins_test_cov=yes \
            jenkins_test_cppcheck=no \
            jenkins_test_csbuild=no \
            jenkins_test_gtest=no \
            jenkins_test_style=no \
            ./contrib/test_jenkins.sh
    publishHTML:
      reportDir: 'jenkins/default/cov/cov_build_${BUILD_NUMBER}/output/errors/'
      reportFiles: 'jenkins/default/cov/cov_build_${BUILD_NUMBER}/output/errors/index.html'
      reportName: Coverity Report
      allowMissing: true
    containerSelector:
      - "{name: 'toolbox', category: 'tool'}"
    agentSelector:
      - "{nodeLabel: 'skip-agent'}"
    archiveArtifacts-onfail: |
      jenkins/**/*.tar.gz
    archiveTap: |
      jenkins/**/coverity.tap

  - name: Build RPM/DEB
    run: |
        env JENKINS_RUN_TESTS=no \
            jenkins_test_build=yes \
            jenkins_test_compiler=no \
            jenkins_test_rpm=yes \
            jenkins_test_cov=no \
            jenkins_test_cppcheck=no \
            jenkins_test_csbuild=no \
            jenkins_test_gtest=no \
            jenkins_test_style=no \
            ./contrib/test_jenkins.sh

  - name: Compilers
    run: |
        env JENKINS_RUN_TESTS=no \
            jenkins_test_build=no \
            jenkins_test_compiler=yes \
            jenkins_test_rpm=no \
            jenkins_test_cov=no \
            jenkins_test_cppcheck=no \
            jenkins_test_csbuild=no \
            jenkins_test_gtest=no \
            jenkins_test_style=no \
            ./contrib/test_jenkins.sh
    containerSelector:
      - "{name: 'ubuntu20.04'}"
    agentSelector:
      - "{nodeLabel: 'skip-agent'}"
    archiveArtifacts-onfail: 'jenkins/dpcp-${BUILD_ID}-*.tar.gz'
    archiveTap: |
      jenkins/**/compiler.tap

  - name: CppCheck
    run: |
        env JENKINS_RUN_TESTS=yes \
            jenkins_test_build=no \
            jenkins_test_compiler=no \
            jenkins_test_rpm=no \
            jenkins_test_cov=no \
            jenkins_test_cppcheck=yes \
            jenkins_test_csbuild=no \
            jenkins_test_gtest=no \
            jenkins_test_style=no \
            ./contrib/test_jenkins.sh
    containerSelector:
      - "{name: 'skip-container'}"
    agentSelector:
      - "{nodeLabel: 'beni09'}"
    archiveArtifacts-onfail: 'jenkins/dpcp-${BUILD_ID}-*.tar.gz'
    archiveTap: |
      jenkins/**/cppcheck.tap

  - name: CSBuild
    run: |
        env JENKINS_RUN_TESTS=yes \
            jenkins_test_build=no \
            jenkins_test_compiler=no \
            jenkins_test_rpm=no \
            jenkins_test_cov=no \
            jenkins_test_cppcheck=no \
            jenkins_test_csbuild=yes \
            jenkins_test_gtest=no \
            jenkins_test_style=no \
            ./contrib/test_jenkins.sh
    containerSelector:
      - "{name: 'skip-container'}"
    agentSelector:
      - "{nodeLabel: 'beni09'}"
    archiveArtifacts-onfail: 'jenkins/dpcp-${BUILD_ID}-*.tar.gz'
    archiveTap: |
      jenkins/**/csbuild.tap

  - name: Style Check
    run: |
        JENKINS_RUN_TESTS=yes \
            jenkins_test_build=no \
            jenkins_test_compiler=no \
            jenkins_test_rpm=no \
            jenkins_test_cov=no \
            jenkins_test_cppcheck=no \
            jenkins_test_csbuild=no \
            jenkins_test_gtest=no \
            jenkins_test_style=yes \
            ./contrib/test_jenkins.sh
    containerSelector:
      - "{name: 'fedora32', category: 'tool'}"
    agentSelector:
      - "{nodeLabel: 'skip-agent'}"
    archiveArtifacts: 'jenkins/*.tar.gz'
    archiveTap: |
      jenkins/**/style_test.tap
